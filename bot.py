import os
import logging
import sqlite3
import asyncio
from datetime import datetime
from aiogram import Bot, Dispatcher, types
from aiogram.filters import Command, Text
from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from dotenv import load_dotenv

# Gemini client (Google)
# “ö–∞–∂–µ—Ç –±–æ–ª—Å–∞: from google import genai   (pip package name may differ)
# –ú“±–Ω–¥–∞ –≥–µ–Ω–∞–π –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å—ñ–Ω REST-—Ç–µ–Ω –Ω–µ–º–µ—Å–µ —Ä–µ—Å–º–∏ –ø–∞–∫–µ—Ç—Ç—ñ“£ –º—ã—Å–∞–ª—ã–Ω–∞–Ω “õ–æ–ª–¥–∞–Ω—É“ì–∞ –±–æ–ª–∞–¥—ã.
try:
    from google import genai
    GEMINI_AVAILABLE = True
except Exception:
    GEMINI_AVAILABLE = False

load_dotenv()

logging.basicConfig(level=logging.INFO)
logger = logging.getLogger(__name__)

MAIN_BOT_TOKEN = os.getenv("MAIN_BOT_TOKEN")
GEMINI_API_KEY = os.getenv("GEMINI_API_KEY")

if not MAIN_BOT_TOKEN:
    logger.error("MAIN_BOT_TOKEN –æ—Ä–Ω–∞—Ç—ã–ª–º–∞“ì–∞–Ω. Render/Env –∞–π–Ω—ã–º–∞–ª—ã—Å—ã–Ω –æ—Ä–Ω–∞—Ç—ã“£—ã–∑.")
    raise SystemExit("MAIN_BOT_TOKEN –∂–æ“õ")

bot = Bot(token=MAIN_BOT_TOKEN)
dp = Dispatcher()

# --- SQLite “õ–∞—Ä–∞–ø–∞–π—ã–º –¥–µ—Ä–µ–∫“õ–æ—Ä (—Ç“±—Ä–∞“õ—Ç—ã) ---
DB_PATH = "manybot_kz.db"

def init_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("""
    CREATE TABLE IF NOT EXISTS templates (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        title TEXT,
        content TEXT,
        created_at TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS schedules (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER,
        title TEXT,
        content TEXT,
        cron TEXT,
        created_at TEXT
    )
    """)
    cur.execute("""
    CREATE TABLE IF NOT EXISTS admins (
        id INTEGER PRIMARY KEY AUTOINCREMENT,
        user_id INTEGER UNIQUE
    )
    """)
    conn.commit()
    conn.close()

init_db()

# --- –ö”©–º–µ–∫—à—ñ —Ñ—É–Ω–∫—Ü–∏—è–ª–∞—Ä ---
def add_template_db(user_id: int, title: str, content: str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT INTO templates (user_id, title, content, created_at) VALUES (?, ?, ?, ?)",
                (user_id, title, content, datetime.utcnow().isoformat()))
    conn.commit()
    conn.close()

def list_templates_db(user_id: int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, title, content FROM templates WHERE user_id=? ORDER BY id DESC", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return rows

def add_schedule_db(user_id:int, title:str, content:str, cron_expr:str):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("INSERT INTO schedules (user_id, title, content, cron, created_at) VALUES (?, ?, ?, ?, ?)",
                (user_id, title, content, cron_expr, datetime.utcnow().isoformat()))
    conn.commit()
    conn.close()

def list_schedules_db(user_id:int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, title, content, cron FROM schedules WHERE user_id=?", (user_id,))
    rows = cur.fetchall()
    conn.close()
    return rows

def is_admin(user_id:int):
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT 1 FROM admins WHERE user_id=?", (user_id,))
    ok = cur.fetchone() is not None
    conn.close()
    return ok

def ensure_admin(user_id:int):
    # for initial testing, make the deployer admin by env var
    ADMIN_ID = os.getenv("ADMIN_ID")
    if ADMIN_ID and int(ADMIN_ID) == user_id:
        conn = sqlite3.connect(DB_PATH)
        cur = conn.cursor()
        cur.execute("INSERT OR IGNORE INTO admins (user_id) VALUES (?)", (user_id,))
        conn.commit()
        conn.close()

# --- Scheduler ---
scheduler = AsyncIOScheduler()

async def send_scheduled_message(chat_id: int, text: str):
    try:
        await bot.send_message(chat_id, text)
    except Exception as e:
        logger.error("–ñ—ñ–±–µ—Ä—É “õ–∞—Ç–µ—Å—ñ: %s", e)

def schedule_job(job_id: str, cron_expr: str, chat_id: int, text: str):
    # “ö–∞—Ä–∞–ø–∞–π—ã–º cron_expr “õ“±—Ä–∞—Å—Ç—ã—Ä—É: "day-of-week hour minute" –º—ã—Å–∞–ª—ã: "mon 09 00"
    # –ë“±–ª –º—ã—Å–∞–ª “Ø—à—ñ–Ω –±—ñ–∑ –∫“Ø–Ω –º–µ–Ω —É–∞“õ—ã—Ç—Ç—ã –æ“õ—ã–ø, –∫“Ø–Ω–¥–µ–ª—ñ–∫—Ç—ñ/–∞–ø—Ç–∞–ª—ã“õ –∂–æ—Å–ø–∞—Ä–ª–∞—É–¥—ã –∂–µ“£—ñ–ª–¥–µ—Ç–µ–º—ñ–∑.
    # –°—ã–Ω—ã–ø—Ç–∞—É: cron_expr = "weekly:MON:09:00" –Ω–µ–º–µ—Å–µ "daily:09:00"
    parts = cron_expr.split(":")
    if parts[0] == "daily":
        time_part = parts[1]  # HH:MM
        hour, minute = map(int, time_part.split(":"))
        scheduler.add_job(lambda: asyncio.create_task(send_scheduled_message(chat_id, text)),
                          'cron', hour=hour, minute=minute, id=job_id, replace_existing=True)
    elif parts[0] == "weekly":
        _, weekday, time_part = parts
        hour, minute = map(int, time_part.split(":"))
        scheduler.add_job(lambda: asyncio.create_task(send_scheduled_message(chat_id, text)),
                          'cron', day_of_week=weekday.lower(), hour=hour, minute=minute, id=job_id, replace_existing=True)
    else:
        logger.warning("–ë–µ–ª–≥—ñ—Å—ñ–∑ cron —Ç“Ø—Ä—ñ: %s", cron_expr)

# --- Gemini helper ---
def init_genai_client():
    if not GEMINI_API_KEY:
        logger.warning("GEMINI_API_KEY –æ—Ä–Ω–∞—Ç—ã–ª–º–∞“ì–∞–Ω. /ask –∫–æ–º–∞–Ω–¥–∞—Å—ã –∂“±–º—ã—Å —ñ—Å—Ç–µ–º–µ–π–¥—ñ.")
        return None
    if not GEMINI_AVAILABLE:
        logger.warning("google.genai –∫—ñ—Ç–∞–ø—Ö–∞–Ω–∞—Å—ã —Ç–∞–±—ã–ª–º–∞–¥—ã. –ï–≥–µ—Ä –∂–æ“õ –±–æ–ª—Å–∞ REST –∞—Ä“õ—ã–ª—ã —à–∞“õ—ã—Ä.")
        return None
    client = genai.Client(api_key=GEMINI_API_KEY)
    return client

genai_client = init_genai_client()

async def ask_gemini(prompt: str) -> str:
    """
    Gemini-–ø–µ–Ω —Å“±—Ä–∞—É –∂–∞—Å–∞–π–¥—ã. –ú“±–Ω–¥–∞ “õ–∞—Ä–∞–ø–∞–π—ã–º generate_content –º—ã—Å–∞–ª—ã –∫”©—Ä—Å–µ—Ç—ñ–ª–≥–µ–Ω.
    –ï–≥–µ—Ä —Ä–µ—Å–º–∏ –∫–ª–∏–µ–Ω—Ç –±–æ–ª–º–∞—Å–∞ REST —à–∞“õ—ã—Ä—É –∞—Ä“õ—ã–ª—ã –¥–∞ –∂–∞—Å–∞—É“ì–∞ –±–æ–ª–∞–¥—ã.
    """
    if not genai_client:
        return "–ö–µ—à—ñ—Ä—ñ“£—ñ–∑, Gemini –∫–ª–∏–µ–Ω—Ç—ñ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è–ª–∞–Ω–±–∞“ì–∞–Ω."
    try:
        # generate_content –º—ã—Å–∞–ª—ã: model –∞—Ç–∞—É—ã–Ω –∂–æ–±–∞–¥–∞ ”©–∑–≥–µ—Ä—Ç—É–≥–µ –±–æ–ª–∞–¥—ã
        response = genai_client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt
        )
        # response.text –Ω–µ–º–µ—Å–µ response.result –±–æ–ª—É—ã –º“Ø–º–∫—ñ–Ω; –∫–ª–∏–µ–Ω—Ç –Ω“±—Å“õ–∞—Å—ã–Ω–∞ –±–∞–π–ª–∞–Ω—ã—Å—Ç—ã
        # “ö–∞—É—ñ–ø—Å—ñ–∑–¥—ñ–∫ “Ø—à—ñ–Ω .text —Ç–µ–∫—Å–µ—Ä–µ–π—ñ–∫
        text = getattr(response, "text", None) or str(response)
        return text
    except Exception as e:
        logger.exception("Gemini “õ–∞—Ç–µ: %s", e)
        return "Gemini-–¥–µ–Ω –∂–∞—É–∞–ø –∞–ª—É –∫–µ–∑—ñ–Ω–¥–µ “õ–∞—Ç–µ –ø–∞–π–¥–∞ –±–æ–ª–¥—ã."

# --- –ë–∞—Å—Ç–∞–ø“õ—ã –º”ô–∑—ñ—Ä (“õ–∞–∑–∞“õ—à–∞) ---
main_kb = ReplyKeyboardMarkup(
    keyboard=[
        [KeyboardButton("üìÑ –®–∞–±–ª–æ–Ω–¥–∞—Ä"), KeyboardButton("‚ûï –®–∞–±–ª–æ–Ω “õ–æ—Å—É")],
        [KeyboardButton("üìÜ –ê–ø—Ç–∞ –∂–æ—Å–ø–∞—Ä—ã"), KeyboardButton("‚úâÔ∏è –•–∞–±–∞—Ä —Ç–∞—Ä–∞—Ç—É (admin)")],
        [KeyboardButton("üß† –°“±—Ä–∞“õ “õ–æ—é (Gemini)"), KeyboardButton("üõ†Ô∏è –ë–∞–ø—Ç–∞—É–ª–∞—Ä")],
    ],
    resize_keyboard=True
)

# --- –•–µ–Ω–¥–ª–µ—Ä–ª–µ—Ä ---
@dp.message(Command(commands=["start"]))
async def cmd_start(message: types.Message):
    ensure_admin(message.from_user.id)
    text = (
        "–°”ô–ª–µ–º! üá∞üáø\n"
        "–ë“±–ª ‚Äî “õ–∞–∑–∞“õ—à–∞ Manybot –ø—Ä–æ—Ç–æ—Ç–∏–ø—ñ.\n\n"
        "–ú”ô–∑—ñ—Ä–¥–µ–Ω —Ç–∞“£–¥–∞“£—ã–∑ –Ω–µ–º–µ—Å–µ /help –¥–µ–ø –∂–∞–∑—ã“£—ã–∑."
    )
    await message.answer(text, reply_markup=main_kb)

@dp.message(Command(commands=["help"]))
async def cmd_help(message: types.Message):
    await message.answer(
        "“ö–æ–ª –∂–µ—Ç—ñ–º–¥—ñ –∫–æ–º–∞–Ω–¥–∞–ª–∞—Ä:\n"
        "/templates ‚Äî —à–∞–±–ª–æ–Ω–¥–∞—Ä–¥—ã “õ–∞—Ä–∞—É\n"
        "/addtemplate ‚Äî —à–∞–±–ª–æ–Ω “õ–æ—Å—É\n"
        "/schedules ‚Äî –∂–æ—Å–ø–∞—Ä–ª–∞—Ä–¥—ã –∫”©—Ä—É\n"
        "/addschedule ‚Äî –∞–ø—Ç–∞ –∂–æ—Å–ø–∞—Ä—ã–Ω “õ–æ—Å—É\n"
        "/ask ‚Äî GPT (Gemini) –∫”©–º–µ–≥—ñ\n"
    )

@dp.message(Text(equals="üìÑ –®–∞–±–ª–æ–Ω–¥–∞—Ä"))
async def show_templates(message: types.Message):
    rows = list_templates_db(message.from_user.id)
    if not rows:
        await message.answer("–°—ñ–∑–¥–µ —à–∞–±–ª–æ–Ω–¥–∞—Ä –∂–æ“õ. '‚ûï –®–∞–±–ª–æ–Ω “õ–æ—Å—É' –∞—Ä“õ—ã–ª—ã “õ–æ—Å—ã“£—ã–∑.")
        return
    text = "–°—ñ–∑–¥—ñ“£ —à–∞–±–ª–æ–Ω–¥–∞—Ä—ã“£—ã–∑:\n\n"
    for r in rows:
        text += f"ID:{r[0]} ‚Äî {r[1]}\n{r[2]}\n\n"
    await message.answer(text)

@dp.message(Text(equals="‚ûï –®–∞–±–ª–æ–Ω “õ–æ—Å—É"))
async def start_add_template(message: types.Message):
    await message.answer("–®–∞–±–ª–æ–Ω –∞—Ç–∞—É—ã–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–º—ã—Å–∞–ª—ã: '–ñ–∞“£–∞ ”©–Ω—ñ–º')\n–¢–æ“õ—Ç–∞—Ç“õ—ã“£—ã–∑ –∫–µ–ª—Å–µ /cancel –¥–µ–ø –∂–∞–∑—ã“£—ã–∑.")
    await dp.current_state(user=message.from_user.id).set_state("TEMPLATE_TITLE")

@dp.message(state="TEMPLATE_TITLE")
async def input_template_title(message: types.Message):
    if message.text == "/cancel":
        await message.answer("”ò—Ä–µ–∫–µ—Ç —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã.", reply_markup=main_kb)
        await dp.current_state(user=message.from_user.id).clear()
        return
    await dp.current_state(user=message.from_user.id).update_data(title=message.text)
    await message.answer("–ï–Ω–¥—ñ —à–∞–±–ª–æ–Ω –º”ô—Ç—ñ–Ω—ñ–Ω –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")
    await dp.current_state(user=message.from_user.id).set_state("TEMPLATE_CONTENT")

@dp.message(state="TEMPLATE_CONTENT")
async def input_template_content(message: types.Message):
    data = await dp.current_state(user=message.from_user.id).get_data()
    title = data.get("title", "–ë–µ–∑ –Ω–∞–∑–≤–∞–Ω–∏—è")
    content = message.text
    add_template_db(message.from_user.id, title, content)
    await message.answer("‚úÖ –®–∞–±–ª–æ–Ω —Å–∞“õ—Ç–∞–ª–¥—ã.", reply_markup=main_kb)
    await dp.current_state(user=message.from_user.id).clear()

@dp.message(Text(equals="üìÜ –ê–ø—Ç–∞ –∂–æ—Å–ø–∞—Ä—ã"))
async def cmd_week_plan(message: types.Message):
    await message.answer(
        "–ê–ø—Ç–∞–ª—ã“õ –∂–æ—Å–ø–∞—Ä “õ–æ—Å—É: /addschedule\n"
        "–ë–∞—Ä –∂–æ—Å–ø–∞—Ä–ª–∞—Ä–¥—ã –∫”©—Ä—É: /schedules\n\n"
        "–ü—ñ—à—ñ–º –º—ã—Å–∞–ª—ã (–∞–ø—Ç–∞–ª—ã“õ):\n"
        "/addschedule weekly:mon:09:00\n"
        "–°–æ–¥–∞–Ω –∫–µ–π—ñ–Ω –±–æ—Ç–∞“£—ã–∑–¥–∞–Ω –º”ô—Ç—ñ–Ω–¥—ñ –∂—ñ–±–µ—Ä–µ—Å—ñ–∑."
    )

@dp.message(Command(commands=["addschedule"]))
async def cmd_add_schedule(message: types.Message):
    # –º”ô—Ç—ñ–Ω–Ω–µ–Ω cron-—Ç—ñ –∞–ª—É: –∫–æ–º–∞–Ω–¥–∞ —Ñ–æ—Ä–º–∞—Ç—ã–Ω–¥–∞ —Ö–∞–±–∞—Ä–ª–∞–º–∞: /addschedule weekly:mon:09:00
    args = message.get_args()
    if not args:
        await message.answer("“ö–æ–ª–¥–∞–Ω—É: /addschedule weekly:mon:09:00 –Ω–µ–º–µ—Å–µ /addschedule daily:09:00")
        return
    await dp.current_state(user=message.from_user.id).update_data(cron=args)
    await dp.current_state(user=message.from_user.id).set_state("SCHEDULE_TEXT")
    await message.answer("–ñ–æ—Å–ø–∞—Ä “Ø—à—ñ–Ω –∂—ñ–±–µ—Ä—ñ–ª–µ—Ç—ñ–Ω –º”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑:")

@dp.message(state="SCHEDULE_TEXT")
async def save_schedule_text(message: types.Message):
    data = await dp.current_state(user=message.from_user.id).get_data()
    cron = data.get("cron")
    text = message.text
    add_schedule_db(message.from_user.id, f"–ñ–æ—Å–ø–∞—Ä {cron}", text, cron)
    # scheduler-–≥–µ “õ–æ—Å—É
    job_id = f"{message.from_user.id}_{int(datetime.utcnow().timestamp())}"
    schedule_job(job_id, cron, message.chat.id, text)
    await message.answer("‚úÖ –ê–ø—Ç–∞–ª—ã“õ –∂–æ—Å–ø–∞—Ä —Å–∞“õ—Ç–∞–ª–¥—ã –∂”ô–Ω–µ –∂–æ—Å–ø–∞—Ä–ª–∞–Ω–¥—ã.", reply_markup=main_kb)
    await dp.current_state(user=message.from_user.id).clear()

@dp.message(Command(commands=["schedules"]))
async def cmd_list_schedules(message: types.Message):
    rows = list_schedules_db(message.from_user.id)
    if not rows:
        await message.answer("–ñ–æ—Å–ø–∞—Ä–ª–∞—Ä –∂–æ“õ.")
        return
    text = "–°—ñ–∑–¥—ñ“£ –∂–æ—Å–ø–∞—Ä–ª–∞—Ä—ã“£—ã–∑:\n\n"
    for r in rows:
        text += f"ID:{r[0]} ‚Äî {r[1]}\n{r[2]}\nCron: {r[3]}\n\n"
    await message.answer(text)

@dp.message(Text(equals="üß† –°“±—Ä–∞“õ “õ–æ—é (Gemini)"))
async def ask_menu(message: types.Message):
    await message.answer("–°“±—Ä–∞“ì—ã“£—ã–∑–¥—ã –∂–∞–∑—ã“£—ã–∑ (–Ω–µ–º–µ—Å–µ /cancel):")
    await dp.current_state(user=message.from_user.id).set_state("GEMINI_ASK")

@dp.message(state="GEMINI_ASK")
async def handle_gemini_ask(message: types.Message):
    if message.text == "/cancel":
        await message.answer("–û—Ç–º–µ–Ω–∞.", reply_markup=main_kb)
        await dp.current_state(user=message.from_user.id).clear()
        return
    prompt = f"–ü–∞–π–¥–∞–ª–∞–Ω—É—à—ã —Å“±—Ä–∞“ì—ã (“õ–∞–∑–∞“õ—à–∞): {message.text}\n–ñ–∞—É–∞–ø “õ–∞–∑–∞“õ—Å—Ç–∞–Ω—à–∞ “õ—ã—Å“õ–∞—à–∞ ”ô—Ä—ñ —Ç“Ø—Å—ñ–Ω—ñ–∫—Ç—ñ –µ—Ç—ñ–ø –±–µ—Ä."
    answer = await asyncio.get_event_loop().run_in_executor(None, lambda: asyncio.run(ask_gemini(prompt)) if False else ask_gemini_sync(prompt))
    # –∂–æ“ì–∞—Ä—ã–¥–∞“ì—ã –∂–æ–ª –∫–ª–∏–µ–Ω—Ç –Ω“±—Å“õ–∞—Å—ã–Ω–∞ “õ–∞—Ä–∞–π —à–∞“õ—ã—Ä—ã–ª–∞–¥—ã; —Ç”©–º–µ–Ω–¥–µ ask_gemini_sync –∞–Ω—ã“õ—Ç–∞–ª“ì–∞–Ω
    await message.answer(f"üß† Gemini –∂–∞—É–∞–ø:\n\n{answer}", reply_markup=main_kb)
    await dp.current_state(user=message.from_user.id).clear()

# ---------- “ö–∞—Ä–∞–ø–∞–π—ã–º —Å–∏–Ω—Ö—Ä–æ–Ω–¥—ã –∂“Ø–≥—ñ—Ä—Ç–ø–µ (–∫–µ–π–±—ñ—Ä –æ—Ä—Ç–∞–¥–∞ genai.sync –∂“±–º—ã—Å —ñ—Å—Ç–µ–º–µ—É—ñ –º“Ø–º–∫—ñ–Ω)
def ask_gemini_sync(prompt: str) -> str:
    if not genai_client:
        return "Gemini “õ–æ–ª–∂–µ—Ç—ñ–º—Å—ñ–∑."
    try:
        response = genai_client.models.generate_content(
            model="gemini-2.5-flash",
            contents=prompt
        )
        text = getattr(response, "text", None) or str(response)
        return text
    except Exception as e:
        logger.exception("Gemini sync “õ–∞—Ç–µ: %s", e)
        return "Gemini –∂–∞—É–∞–ø –±–µ—Ä—É–¥–µ “õ–∞—Ç–µ."

# --- –ê–¥–º–∏–Ω“ì–∞ –∞—Ä–Ω–∞–ª“ì–∞–Ω broadcast –∫–æ–º–∞–Ω–¥–∞—Å—ã (–∂”©–Ω “ì–∞–Ω–∞ –º—ã—Å–∞–ª) ---
@dp.message(Text(equals="‚úâÔ∏è –•–∞–±–∞—Ä —Ç–∞—Ä–∞—Ç—É (admin)"))
async def admin_broadcast_menu(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–°—ñ–∑ –∞–¥–º–∏–Ω –µ–º–µ—Å—Å—ñ–∑.")
        return
    await message.answer("–ñ—ñ–±–µ—Ä—ñ–ª–µ—Ç—ñ–Ω –º”ô—Ç—ñ–Ω–¥—ñ –µ–Ω–≥—ñ–∑—ñ“£—ñ–∑ (–±–∞—Ä–ª—ã“õ —Å–∞“õ—Ç–∞–ª“ì–∞–Ω —á–∞—Ç—Ç–∞—Ä“ì–∞):")
    await dp.current_state(user=message.from_user.id).set_state("BROADCAST_TEXT")

@dp.message(state="BROADCAST_TEXT")
async def handle_broadcast(message: types.Message):
    if not is_admin(message.from_user.id):
        await message.answer("–°—ñ–∑ –∞–¥–º–∏–Ω –µ–º–µ—Å—Å—ñ–∑.")
        await dp.current_state(user=message.from_user.id).clear()
        return
    text = message.text
    # “ö–∞—Ä–∞–ø–∞–π—ã–º: broadcast —Ç–µ–∫ –æ—Å—ã –±–æ—Ç—Ç—ã“£ —Å–∞“õ—Ç–∞–ª“ì–∞–Ω –∂–æ—Å–ø–∞—Ä/chat-—Ç–µ—Ä—ñ–Ω–µ –∂—ñ–±–µ—Ä–µ–¥—ñ.
    # ”ò—Ä—ñ “õ–∞—Ä–∞–π —Å—ñ–∑ –ø–∞–π–¥–∞–ª–∞–Ω—É—à—ã–ª–∞—Ä —Ç—ñ–∑—ñ–º—ñ–Ω —Å–∞“õ—Ç–∞—É—ã“£—ã–∑ –∫–µ—Ä–µ–∫.
    # –ú“±–Ω–¥–∞ —Ç–µ–∫ –º—ã—Å–∞–ª —Ä–µ—Ç—ñ–Ω–¥–µ ”©–∑—ñ“£–µ –∂—ñ–±–µ—Ä–µ–º—ñ–∑.
    await bot.send_message(message.from_user.id, f"–°—ñ–∑ –∂—ñ–±–µ—Ä–¥—ñ“£—ñ–∑:\n\n{text}")
    await message.answer("‚úÖ –•–∞–±–∞—Ä –∂—ñ–±–µ—Ä—ñ–ª–¥—ñ (–∂–µ—Ä–≥—ñ–ª—ñ–∫—Ç—ñ —Ç–µ—Å—Ç).", reply_markup=main_kb)
    await dp.current_state(user=message.from_user.id).clear()

# --- Cancel universal handler ---
@dp.message(Command(commands=["cancel"]))
async def cmd_cancel(message: types.Message):
    await dp.current_state(user=message.from_user.id).clear()
    await message.answer("”ò—Ä–µ–∫–µ—Ç —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã.", reply_markup=main_kb)

# --- “ö—ã–∑–º–µ—Ç—Ç—ñ–∫: scheduler –∂“Ø–∫—Ç–µ—É DB-–¥–µ–Ω ---
def load_schedules_from_db():
    conn = sqlite3.connect(DB_PATH)
    cur = conn.cursor()
    cur.execute("SELECT id, user_id, title, content, cron FROM schedules")
    rows = cur.fetchall()
    conn.close()
    for r in rows:
        job_id = f"db_{r[0]}"
        # chat_id —Ä–µ—Ç—ñ–Ω–¥–µ –±—ñ–∑ user_id-–¥—ã –ø–∞–π–¥–∞–ª–∞–Ω–∞–º—ã–∑ ‚Äî “õ–∞–∂–µ—Ç –±–æ–ª—Å–∞ —á–∞—Ç id —Å–∞“õ—Ç–∞—É –∫–µ—Ä–µ–∫
        schedule_job(job_id, r[4], r[1], r[3])

# --- –ë–æ—Ç—Ç—ã —ñ—Å–∫–µ “õ–æ—Å—É ---
async def main():
    load_schedules_from_db()
    scheduler.start()
    await dp.start_polling(bot)

if __name__ == "__main__":
    try:
        asyncio.run(main())
    except (KeyboardInterrupt, SystemExit):
        logger.info("–ë–æ—Ç —Ç–æ“õ—Ç–∞—Ç—ã–ª–¥—ã.")
